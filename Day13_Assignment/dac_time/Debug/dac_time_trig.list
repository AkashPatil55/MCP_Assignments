
dac_time_trig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000468  08000468  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000468  08000468  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000468  08000468  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000468  08000468  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000468  08000468  00001468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800046c  0800046c  0000146c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000470  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000116f  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000452  00000000  00000000  0000319d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  000035f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000096  00000000  00000000  000036c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f9c  00000000  00000000  0000375e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001343  00000000  00000000  0001c6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bcfc  00000000  00000000  0001da3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a9739  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001a4  00000000  00000000  000a977c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a9920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  000a993f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000450 	.word	0x08000450

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000450 	.word	0x08000450

080001c8 <DAC_Init>:
 *      Author: sunbeam
 */

#include "dac.h"

void DAC_Init(void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
//	1. Enable GPIOA peripheral. (DAC1_OUT=PA4, DAC2_OUT=PA5)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000200 <DAC_Init+0x38>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000200 <DAC_Init+0x38>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
//	2. Set GPIO mode to Analog. (MODER = 0b11).
	GPIOA->MODER |= BV(4*2+1) | BV(4*2);
 80001d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000204 <DAC_Init+0x3c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a09      	ldr	r2, [pc, #36]	@ (8000204 <DAC_Init+0x3c>)
 80001de:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80001e2:	6013      	str	r3, [r2, #0]
//	3. Enable DAC peripheral (APB1).
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 80001e4:	4b06      	ldr	r3, [pc, #24]	@ (8000200 <DAC_Init+0x38>)
 80001e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001e8:	4a05      	ldr	r2, [pc, #20]	@ (8000200 <DAC_Init+0x38>)
 80001ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80001ee:	6413      	str	r3, [r2, #64]	@ 0x40
//	4. Enable DAC channel, Output buffer, Enable trigger, and select Trigger (TIM6=0b000) (CR).
	DAC1->CR = DAC_CR_EN1 | DAC_CR_TEN1 | DAC_CR_TSEL1_0 | DAC_CR_TSEL1_1 | DAC_CR_TSEL1_2;
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <DAC_Init+0x40>)
 80001f2:	223d      	movs	r2, #61	@ 0x3d
 80001f4:	601a      	str	r2, [r3, #0]
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40023800 	.word	0x40023800
 8000204:	40020000 	.word	0x40020000
 8000208:	40007400 	.word	0x40007400

0800020c <DAC_SetValue>:

void DAC_SetValue(uint16_t val){
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	80fb      	strh	r3, [r7, #6]
	//	5. Set DAC register to initial value. (DHRxR)
	DAC1->DHR12R1 = val;
 8000216:	4a07      	ldr	r2, [pc, #28]	@ (8000234 <DAC_SetValue+0x28>)
 8000218:	88fb      	ldrh	r3, [r7, #6]
 800021a:	6093      	str	r3, [r2, #8]

	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 800021c:	4b05      	ldr	r3, [pc, #20]	@ (8000234 <DAC_SetValue+0x28>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4a04      	ldr	r2, [pc, #16]	@ (8000234 <DAC_SetValue+0x28>)
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	6053      	str	r3, [r2, #4]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40007400 	.word	0x40007400

08000238 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



int main(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	SystemInit();
 800023c:	f000 f806 	bl	800024c <SystemInit>
	DAC_Init();
 8000240:	f7ff ffc2 	bl	80001c8 <DAC_Init>
	Timer_Init();
 8000244:	f000 f854 	bl	80002f0 <Timer_Init>
	while(1){
 8000248:	bf00      	nop
 800024a:	e7fd      	b.n	8000248 <main+0x10>

0800024c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000250:	f000 f802 	bl	8000258 <DWT_Init>
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}

08000258 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800025c:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <DWT_Init+0x58>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	4a13      	ldr	r2, [pc, #76]	@ (80002b0 <DWT_Init+0x58>)
 8000262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000266:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000268:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <DWT_Init+0x58>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	4a10      	ldr	r2, [pc, #64]	@ (80002b0 <DWT_Init+0x58>)
 800026e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000272:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000274:	4b0f      	ldr	r3, [pc, #60]	@ (80002b4 <DWT_Init+0x5c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0e      	ldr	r2, [pc, #56]	@ (80002b4 <DWT_Init+0x5c>)
 800027a:	f023 0301 	bic.w	r3, r3, #1
 800027e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000280:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <DWT_Init+0x5c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0b      	ldr	r2, [pc, #44]	@ (80002b4 <DWT_Init+0x5c>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800028c:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <DWT_Init+0x5c>)
 800028e:	2200      	movs	r2, #0
 8000290:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000292:	bf00      	nop
    __ASM volatile ("NOP");
 8000294:	bf00      	nop
    __ASM volatile ("NOP");
 8000296:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DWT_Init+0x5c>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	2b00      	cmp	r3, #0
 800029e:	bf0c      	ite	eq
 80002a0:	2301      	moveq	r3, #1
 80002a2:	2300      	movne	r3, #0
 80002a4:	b2db      	uxtb	r3, r3
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000edf0 	.word	0xe000edf0
 80002b4:	e0001000 	.word	0xe0001000

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	@ (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <Timer_Init>:
 *      Author: sunbeam
 */

#include <timer6.h>
#include "dac.h"
void Timer_Init(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80002f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <Timer_Init+0x40>)
 80002f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000330 <Timer_Init+0x40>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6413      	str	r3, [r2, #64]	@ 0x40

	    TIM6->PSC = 16000 - 1;
 8000300:	4b0c      	ldr	r3, [pc, #48]	@ (8000334 <Timer_Init+0x44>)
 8000302:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000306:	629a      	str	r2, [r3, #40]	@ 0x28

	    TIM6->ARR = 100 - 1;
 8000308:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <Timer_Init+0x44>)
 800030a:	2263      	movs	r2, #99	@ 0x63
 800030c:	62da      	str	r2, [r3, #44]	@ 0x2c

	    TIM6->DIER |= TIM_DIER_UIE;
 800030e:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <Timer_Init+0x44>)
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	4a08      	ldr	r2, [pc, #32]	@ (8000334 <Timer_Init+0x44>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	60d3      	str	r3, [r2, #12]

	    TIM6->CR1 |= TIM_CR1_CEN;
 800031a:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <Timer_Init+0x44>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <Timer_Init+0x44>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6013      	str	r3, [r2, #0]

	    NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000326:	2036      	movs	r0, #54	@ 0x36
 8000328:	f7ff ffc6 	bl	80002b8 <__NVIC_EnableIRQ>

}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40023800 	.word	0x40023800
 8000334:	40001000 	.word	0x40001000

08000338 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

    if (TIM6->SR & TIM_SR_UIF) {
 800033c:	4b1a      	ldr	r3, [pc, #104]	@ (80003a8 <TIM6_DAC_IRQHandler+0x70>)
 800033e:	691b      	ldr	r3, [r3, #16]
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d02c      	beq.n	80003a2 <TIM6_DAC_IRQHandler+0x6a>

        TIM6->SR &= ~TIM_SR_UIF;
 8000348:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <TIM6_DAC_IRQHandler+0x70>)
 800034a:	691b      	ldr	r3, [r3, #16]
 800034c:	4a16      	ldr	r2, [pc, #88]	@ (80003a8 <TIM6_DAC_IRQHandler+0x70>)
 800034e:	f023 0301 	bic.w	r3, r3, #1
 8000352:	6113      	str	r3, [r2, #16]

        static int val = 0;
        static int direction = 1;

        DAC_SetValue(val);
 8000354:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <TIM6_DAC_IRQHandler+0x74>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	b29b      	uxth	r3, r3
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff56 	bl	800020c <DAC_SetValue>


        val += 16 * direction;
 8000360:	4b13      	ldr	r3, [pc, #76]	@ (80003b0 <TIM6_DAC_IRQHandler+0x78>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	011a      	lsls	r2, r3, #4
 8000366:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <TIM6_DAC_IRQHandler+0x74>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4413      	add	r3, r2
 800036c:	4a0f      	ldr	r2, [pc, #60]	@ (80003ac <TIM6_DAC_IRQHandler+0x74>)
 800036e:	6013      	str	r3, [r2, #0]

        if (val >= 4095) {
 8000370:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <TIM6_DAC_IRQHandler+0x74>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000378:	4293      	cmp	r3, r2
 800037a:	dd08      	ble.n	800038e <TIM6_DAC_IRQHandler+0x56>
            val = 4095;
 800037c:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <TIM6_DAC_IRQHandler+0x74>)
 800037e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000382:	601a      	str	r2, [r3, #0]
            direction = -1;
 8000384:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <TIM6_DAC_IRQHandler+0x78>)
 8000386:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800038a:	601a      	str	r2, [r3, #0]
        } else if (val <= 0) {
            val = 0;
            direction = 1;
        }
    }
}
 800038c:	e009      	b.n	80003a2 <TIM6_DAC_IRQHandler+0x6a>
        } else if (val <= 0) {
 800038e:	4b07      	ldr	r3, [pc, #28]	@ (80003ac <TIM6_DAC_IRQHandler+0x74>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	dc05      	bgt.n	80003a2 <TIM6_DAC_IRQHandler+0x6a>
            val = 0;
 8000396:	4b05      	ldr	r3, [pc, #20]	@ (80003ac <TIM6_DAC_IRQHandler+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
            direction = 1;
 800039c:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <TIM6_DAC_IRQHandler+0x78>)
 800039e:	2201      	movs	r2, #1
 80003a0:	601a      	str	r2, [r3, #0]
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40001000 	.word	0x40001000
 80003ac:	20000020 	.word	0x20000020
 80003b0:	20000000 	.word	0x20000000

080003b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b4:	480d      	ldr	r0, [pc, #52]	@ (80003ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b8:	f7ff ff48 	bl	800024c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003bc:	480c      	ldr	r0, [pc, #48]	@ (80003f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003be:	490d      	ldr	r1, [pc, #52]	@ (80003f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c0:	4a0d      	ldr	r2, [pc, #52]	@ (80003f8 <LoopForever+0xe>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c4:	e002      	b.n	80003cc <LoopCopyDataInit>

080003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ca:	3304      	adds	r3, #4

080003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d0:	d3f9      	bcc.n	80003c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d2:	4a0a      	ldr	r2, [pc, #40]	@ (80003fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000400 <LoopForever+0x16>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d8:	e001      	b.n	80003de <LoopFillZerobss>

080003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003dc:	3204      	adds	r2, #4

080003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e0:	d3fb      	bcc.n	80003da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e2:	f000 f811 	bl	8000408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e6:	f7ff ff27 	bl	8000238 <main>

080003ea <LoopForever>:

LoopForever:
  b LoopForever
 80003ea:	e7fe      	b.n	80003ea <LoopForever>
  ldr   r0, =_estack
 80003ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003f8:	08000470 	.word	0x08000470
  ldr r2, =_sbss
 80003fc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000400:	20000024 	.word	0x20000024

08000404 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC_IRQHandler>
	...

08000408 <__libc_init_array>:
 8000408:	b570      	push	{r4, r5, r6, lr}
 800040a:	4d0d      	ldr	r5, [pc, #52]	@ (8000440 <__libc_init_array+0x38>)
 800040c:	4c0d      	ldr	r4, [pc, #52]	@ (8000444 <__libc_init_array+0x3c>)
 800040e:	1b64      	subs	r4, r4, r5
 8000410:	10a4      	asrs	r4, r4, #2
 8000412:	2600      	movs	r6, #0
 8000414:	42a6      	cmp	r6, r4
 8000416:	d109      	bne.n	800042c <__libc_init_array+0x24>
 8000418:	4d0b      	ldr	r5, [pc, #44]	@ (8000448 <__libc_init_array+0x40>)
 800041a:	4c0c      	ldr	r4, [pc, #48]	@ (800044c <__libc_init_array+0x44>)
 800041c:	f000 f818 	bl	8000450 <_init>
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	10a4      	asrs	r4, r4, #2
 8000424:	2600      	movs	r6, #0
 8000426:	42a6      	cmp	r6, r4
 8000428:	d105      	bne.n	8000436 <__libc_init_array+0x2e>
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000430:	4798      	blx	r3
 8000432:	3601      	adds	r6, #1
 8000434:	e7ee      	b.n	8000414 <__libc_init_array+0xc>
 8000436:	f855 3b04 	ldr.w	r3, [r5], #4
 800043a:	4798      	blx	r3
 800043c:	3601      	adds	r6, #1
 800043e:	e7f2      	b.n	8000426 <__libc_init_array+0x1e>
 8000440:	08000468 	.word	0x08000468
 8000444:	08000468 	.word	0x08000468
 8000448:	08000468 	.word	0x08000468
 800044c:	0800046c 	.word	0x0800046c

08000450 <_init>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr

0800045c <_fini>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr
